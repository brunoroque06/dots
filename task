#!/usr/bin/env elvish

use flag
use str
use os

fn ci-lint { zizmor .github/workflows/main.yml }

fn cfg-setup {
	softwareupdate --install --all

	if (not (os:exists /opt/homebrew/bin/brew)) {
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	}

	brew update
	brew bundle install --file brew/brewfile
	brew doctor
}

var paths = [
	[&s=aerospace &d=$E:HOME/.config/aerospace]
	[&s=elvish &d=$E:HOME/.config/elvish]
	[&s=ghostty &d=$E:HOME'/Library/Application Support/com.mitchellh.ghostty']
	[&s=git &d=$E:HOME/.config/git]
	[&s=helix &d=$E:HOME/.config/helix]
	[&s=ideavim &d=$E:HOME]
	[&s=jetbrains &d=$E:HOME'/Library/Application Support/JetBrains/Rider2025.2/keymaps']
	[&s=kitty &d=$E:HOME/.config/kitty]
	[&s=nvim &d=$E:HOME/.config/nvim]
	[&s=psql &d=$E:HOME]
	[&s=ripgrep &d=$E:HOME/.config]
	[&s=vscode &d=$E:HOME'/Library/Application Support/Code/User']
	[&s=zed &d=$E:HOME/.config/zed]
]

fn cfg-link {
	each { |p| mkdir -p $p[d]; stow -S -v 1 -t $p[d] $p[s] } $paths
}

fn cfg-unlink {
	each { |p| stow -D -v 1 -t $p[d] $p[s] } $paths
}

fn elvish-lint {
	put task ^
		| each { |f| elvish -compileonly $f }
}

fn macos-setup {
	# Dock
	defaults write com.apple.dock autohide -bool true
	defaults write com.apple.dock expose-group-apps -bool true
	defaults write com.apple.dock mru-spaces -bool false
	defaults write com.apple.dock show-recents -bool false
	defaults write com.apple.dock tilesize -int 32

	# Finder
	defaults write NSGlobalDomain AppleShowAllExtensions -bool true
	defaults write com.apple.Finder AppleShowAllFiles YES
	defaults write com.apple.finder FXDefaultSearchScope -string SCcf
	defaults write com.apple.finder FXPreferredViewStyle -string Nlsv
	defaults write com.apple.finder NSUserKeyEquivalents -dict-add 'Go to Folder...' @g
	defaults write com.apple.finder ShowPathbar -bool true

	# Keyboard
	defaults write NSGlobalDomain AppleKeyboardUIMode -int 2
	defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
	defaults write NSGlobalDomain InitialKeyRepeat -int 15
	defaults write NSGlobalDomain KeyRepeat -int 2
	defaults write NSGlobalDomain com.apple.keyboard.fnState -bool false

	# Mail
	defaults write com.apple.mail NSUserKeyEquivalents -dict-add Send @\U21a9

	# Mouse
	defaults write NSGlobalDomain com.apple.mouse.scaling -float 1

	# Spaces
	defaults write com.apple.spaces spans-displays -bool true

	# Keyboard Shortcuts
	# defaults write -g NSUserKeyEquivalents -dict-add Fill '^@f'
	# defaults write -g NSUserKeyEquivalents -dict-add Center '^@c'
	# defaults write -g NSUserKeyEquivalents -dict-add Left '^@h'
	# defaults write -g NSUserKeyEquivalents -dict-add Right '^@l'
	# defaults write -g NSUserKeyEquivalents -dict-add Top '^@k'
	# defaults write -g NSUserKeyEquivalents -dict-add Bottom '^@j'
	# defaults write -g NSUserKeyEquivalents -dict-add 'Return to Previous Size' '^@r'

	killall Finder SystemUIServer
}

fn lua-lint {
	stylua --check --verbose nvim/init.lua
	lua-language-server --check nvim/init.lua
}

fn text-lint { npx prettier -c . }

var cmds = [
	&ci-lint=$ci-lint~
	&cfg-link=$cfg-link~
	&cfg-setup=$cfg-setup~
	&cfg-unlink=$cfg-unlink~
	&elvish-lint=$elvish-lint~
	&macos-setup=$macos-setup~
	&lua-lint=$lua-lint~
	&text-lint=$text-lint~
]

if (and (> (count $args) 0) (has-key $cmds $args[0])) {
	flag:call $cmds[$args[0]] []
} else {
	echo 'Usage: ./task ['(str:join '|' [(keys $cmds)])']'
}
